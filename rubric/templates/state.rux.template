module StoreNameStore {
  @ State management for feature/domain
  @ Coordinates between UI and services

  type: "store"
  
  location: "src/stores/store-name-store.ts"
  
  interface {
    @ Zustand store hook
    function useStoreNameStore() -> StoreState
  }
  
  state {
    @ Internal state shape
    private items: Array
    private currentItem: Item
    private isLoading: boolean
    private error: string
    private filters: FilterType
    
    @ Optimistic update tracking
    private optimisticUpdates: Map
  }
  
  imports {
    allow "zustand" as external
    allow "immer" as external
    allow "../services/entity-service"
    allow "../types"
    allow "../utils/errors"
    deny imports ["../data/*"]
    deny imports ["../components/*"]
  }
  
  constraints {
    require pattern.immutable_updates
    require pattern.action_error_handling
    deny pattern.complex_calculations
    deny pattern.validation_logic
    deny io.network.*
    deny io.localStorage.*
    require pattern.selector_memoization
    deny exports ["_*"]
    warn file.lines > 200
    deny file.lines > 400
  }
}