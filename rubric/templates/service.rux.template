module ServiceNameService {
  @ Business logic for domain/feature
  @ Orchestrates data operations and enforces business rules

  type: "service"
  
  location: "src/services/service-name-service.ts"
  
  interface {
    @ Public service methods
    function createEntity() -> Promise
    function updateEntity() -> Promise
    function deleteEntity() -> Promise
    function getEntity() -> Promise
    function listEntities() -> Promise
    
    @ Business operations
    function validateEntity() -> ValidationResult
    function calculateSomething() -> Result
    function processOperation() -> Promise
  }
  
  state {
    @ Service-level caching
    private cache: Map
    private cacheExpiry: Map
    
    @ Service configuration
    private config: ServiceConfig
  }
  
  imports {
    allow "../data/entity-data"
    allow "./other-service"
    allow "../types"
    allow "../utils/validation"
    allow "../utils/errors"
    allow "date-fns" as external
    allow "zod" as external
    deny imports ["../components/*", "../stores/*"]
  }
  
  constraints {
    require pattern.try_catch_blocks
    require pattern.error_transformation
    deny pattern.jsx_elements
    deny imports ["react", "@mui/material"]
    require pattern.input_validation
    require pattern.business_rules
    deny exports ["_*", "cache", "config"]
    warn file.lines > 300
    deny file.lines > 500
  }
}