module GuardNameGuard {
  @ Route guard for protection purpose
  @ Protects routes that require condition

  type: "guard"
  
  location: "src/guards/GuardNameGuard.tsx"
  
  interface {
    @ Guard component
    function GuardNameGuard() -> JSXElement
    
    @ Hook for checking guard condition
    function useGuardNameCheck() -> GuardCheckResult
    
    @ HOC variant
    function requireGuardName() -> Component
  }
  
  state {
    @ Guard state
    private isChecking: boolean
    private checkResult: boolean
    private reason: string
  }
  
  imports {
    allow "react" as external
    allow "react-router-dom"
    allow "../stores/auth-store"
    allow "../stores/permission-store"
    allow "../types"
    allow "./OtherGuard"
    allow "../components/LoadingSpinner"
    deny imports ["../services/*"]
    deny imports ["../data/*"]
  }
  
  constraints {
    require pattern.early_return
    require pattern.loading_state
    require pattern.secure_by_default
    deny pattern.client_side_only
    require pattern.memoized_check
    require pattern.concurrent_render
    deny pattern.history_manipulation
    require pattern.graceful_failure
    deny exports ["_*", "checkResult"]
    warn file.lines > 100
    deny file.lines > 200
  }
}